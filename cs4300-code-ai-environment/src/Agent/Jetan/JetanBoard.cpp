#include <ai_jetan.h>

#include <cstring>
#include <cstdio>
#include <sstream>
#include <algorithm>
#include <set>
#include <exception>

namespace ai
{
  namespace Jetan
  {
    class Exception: public std::exception {
    public:
      Exception( const std::string& msg );
      virtual const char* what() const throw();
    protected:
      std::string mMsg;
    };

    Exception::Exception( const std::string& msg ) 
      : std::exception(), mMsg( msg ) {
    }
    const char* Exception::what() const throw() {
      return mMsg.c_str( );
    }

    /************************************************************/
    bool BoardLocation::operator<( const BoardLocation& rhs ) const {
      if( x < rhs.x ) {
        return true;
      } else if( x > rhs.x ) {
        return false;
      } else if( y < rhs.y ) {
        return true;
      } else if( y > rhs.y ) {
        return false;
      } else {
        return false;
      }
    }

    /************************************************************/
    SetOfBoardLocations::SetOfBoardLocations( ) {
      clear( );
    }

    void SetOfBoardLocations::clear( ) {
      std::memset( board_locations, 0, sizeof( board_locations[ 0 ] ) * 100 );
      /*
      unsigned int i;
      for( i = 0; i < 100; i++ ) {
        board_locations[ i ] = 0;
      }
      */
    }

    int SetOfBoardLocations::count( const BoardLocation& destination ) const {
      if( destination.x >= 0 && destination.x < 10 && destination.y >= 0 && destination.y < 10 ) {
        unsigned int i = destination.y * 10 + destination.x;
        if( i < 100 ) {
          return board_locations[ i ];
        }
      }
      return 0;
    }
    
    void SetOfBoardLocations::insert( const BoardLocation& destination ) {
      if( destination.x >= 0 && destination.x < 10 && destination.y >= 0 && destination.y < 10 ) {
        unsigned int i = destination.y * 10 + destination.x;
        if( i < 100 ) {
          board_locations[ i ]++;
        }
      }
    }

    /************************************************************/
    static const WarriorPiecePaths g_warriorPiecePaths;
    static const PadwarPiecePaths g_padwarPiecePaths;
    static const DwarPiecePaths g_dwarPiecePaths;
    static const FlierPiecePaths g_flierPiecePaths;
    static const ChiefPiecePaths g_chiefPiecePaths;
    static const PrincessPiecePaths g_princessPiecePaths;
    static const PrincessPieceEscapePaths g_princessPieceEscapePaths;
    static const ThoatPiecePaths g_thoatPiecePaths;
    static const Player1PanthanPiecePaths g_player1PanthanPiecePaths;
    static const Player2PanthanPiecePaths g_player2PanthanPiecePaths;

    /************************************************************/
    PiecePaths::PiecePaths( const std::vector< MovePath >& paths ) 
      : mPaths( paths ) {
      // empty
    }
    const std::vector< MovePath >& PiecePaths::getPaths( ) const {
      return mPaths;
    }

    /************************************************************/
    WarriorPiecePaths::WarriorPiecePaths( )
        : PiecePaths( 
                     {
                       // step north first
                       { { {  0,  1 }, {  0,  1 } } },
                       // { {  0,  1 }, {  0, -1 } },
                       { { {  0,  1 }, {  1,  0 } } },
                       { { {  0,  1 }, { -1,  0 } } },
                       // step south first
                       // { {  0, -1 }, {  0,  1 } },
                       { { {  0, -1 }, {  0, -1 } } },
                       { { {  0, -1 }, {  1,  0 } } },
                       { { {  0, -1 }, { -1,  0 } } },
                       // step east first
                       { { {  1,  0 }, {  0,  1 } } },
                       { { {  1,  0 }, {  0, -1 } } },
                       { { {  1,  0 }, {  1,  0 } } },
                       // { {  1,  0 }, { -1,  0 } },
                       // step west first
                       { { { -1,  0 }, {  0,  1 } } },
                       { { { -1,  0 }, {  0, -1 } } },
                       // { { -1,  0 }, {  1,  0 } },
                       { { { -1,  0 }, { -1,  0 } } },
                     } ) {
      // empty
    }

    /************************************************************/
    PadwarPiecePaths::PadwarPiecePaths( )
      : PiecePaths( 
                {
                  // step north-east first
                  { {  {  1,  1 }, {  1,  1 }  } },
                  { {  {  1,  1 }, {  1, -1 }  } },
                  { {  {  1,  1 }, { -1,  1 }  } },
                  //{ {  1,  1 }, { -1, -1 } },
                  // step north-west first
                  { {  { -1,  1 }, {  1,  1 }  } },
                  //{ { -1,  1 }, {  1, -1 } },
                  { {  { -1,  1 }, { -1,  1 }  } },
                  { {  { -1,  1 }, { -1, -1 }  } },
                  // step south-east first
                  { {  {  1, -1 }, {  1,  1 }  } },
                  { {  {  1, -1 }, {  1, -1 }  } },
                  //{ {  1, -1 }, { -1,  1 } },
                  { {  {  1, -1 }, { -1, -1 }  } },
                  // step south-west first
                  //{ { -1, -1 }, {  1,  1 } },
                  { {  { -1, -1 }, {  1, -1 }  } },
                  { {  { -1, -1 }, { -1,  1 }  } },
                  { {  { -1, -1 }, { -1, -1 }  } },
                } ) {
        // empty
      }

    /************************************************************/
    DwarPiecePaths::DwarPiecePaths( )
      : PiecePaths( 
                {
                  // step north first
                  // step north,north first
                  { {  {  0,  1 }, {  0,  1 }, {  0,  1 }  } },
                  { {  {  0,  1 }, {  0,  1 }, {  0, -1 }  } },
                  { {  {  0,  1 }, {  0,  1 }, {  1,  0 }  } },
                  //{ {  0,  1 }, {  0,  1 }, { -1,  0 } },
                  // step north,east first
                  { {  {  0,  1 }, {  1,  0 }, {  0,  1 }  } },
                  { {  {  0,  1 }, {  1,  0 }, {  0, -1 }  } },
                  { {  {  0,  1 }, {  1,  0 }, {  1,  0 }  } },
                  //{ {  0,  1 }, {  1,  0 }, { -1,  0 } },
                  // step north,west first
                  { {  {  0,  1 }, { -1,  0 }, {  0,  1 }  } },
                  { {  {  0,  1 }, { -1,  0 }, {  0, -1 }  } },
                  //{ {  0,  1 }, { -1,  0 }, {  1,  0 } },
                  { {  {  0,  1 }, { -1,  0 }, { -1,  0 }  } },
                  // step north,south first
                  //{ {  0,  1 }, {  0, -1 }, {  0,  1 } },
                  //{ {  0,  1 }, {  0, -1 }, {  0, -1 } },
                  //{ {  0,  1 }, {  0, -1 }, {  1,  0 } },
                  //{ {  0,  1 }, {  0, -1 }, { -1,  0 } },
                    
                  // step south first
                  // step south,north first
                  //{ {  0, -1 }, {  0,  1 }, {  0,  1 } },
                  //{ {  0, -1 }, {  0,  1 }, {  0, -1 } },
                  //{ {  0, -1 }, {  0,  1 }, {  1,  0 } },
                  //{ {  0, -1 }, {  0,  1 }, { -1,  0 } },
                  // step south,east first
                  { {  {  0, -1 }, {  1,  0 }, {  0,  1 }  } },
                  { {  {  0, -1 }, {  1,  0 }, {  0, -1 }  } },
                  { {  {  0, -1 }, {  1,  0 }, {  1,  0 }  } },
                  //{ {  0, -1 }, {  1,  0 }, { -1,  0 } },
                  // step south,west first
                  { {  {  0, -1 }, { -1,  0 }, {  0,  1 }  } },
                  { {  {  0, -1 }, { -1,  0 }, {  0, -1 }  } },
                  //{ {  0, -1 }, { -1,  0 }, {  1,  0 } },
                  { {  {  0, -1 }, { -1,  0 }, { -1,  0 }  } },
                  // step south,south first
                  //{ {  0,  1 }, {  0, -1 }, {  0,  1 } },
                  { {  {  0,  1 }, {  0, -1 }, {  0, -1 }  } },
                  { {  {  0,  1 }, {  0, -1 }, {  1,  0 }  } },
                  { {  {  0,  1 }, {  0, -1 }, { -1,  0 }  } },
                } ) {
      // empty
    }

    /************************************************************/
    FlierPiecePaths::FlierPiecePaths( )
      : PiecePaths( 
                {
                  // Since the flier can jump, we only need to record the endpoints of the paths, not the intermediate ones.
                  // 3 rows up
                  { {  {  3,  3 },  } },
                  { {  {  1,  3 },  } },
                  { {  { -1,  3 },  } },
                  { {  { -3,  3 },  } },
                  // 1 row up
                  { {  {  3,  1 },  } },
                  { {  {  1,  1 },  } },
                  { {  { -1,  1 },  } },
                  { {  { -3,  1 },  } },
                  // 1 row down
                  { {  {  3, -1 },  } },
                  { {  {  1, -1 },  } },
                  { {  { -1, -1 },  } },
                  { {  { -3, -1 },  } },
                  // 3 rows down
                  { {  {  3, -3 },  } },
                  { {  {  1, -3 },  } },
                  { {  { -1, -3 },  } },
                  { {  { -3, -3 },  } },
                } ) {
      // empty
    }
    
    /************************************************************/
    ChiefPiecePaths::ChiefPiecePaths( )
      : PiecePaths( 
                {
                  { {  { -1, -1 }, { -1, -1 }, { -1, -1 }  } }, // { -3, -3 }
                  { {  { -1, -1 }, { -1, -1 }, { -1,  0 }  } }, // { -3, -2 }
                  { {  { -1, -1 }, { -1, -1 }, { -1,  1 }  } }, // { -3, -1 }
                  { {  { -1, -1 }, { -1, -1 }, {  0, -1 }  } }, // { -2, -3 }
                  { {  { -1, -1 }, { -1, -1 }, {  0,  1 }  } }, // { -2, -1 }
                  { {  { -1, -1 }, { -1, -1 }, {  1, -1 }  } }, // { -1, -3 }
                  { {  { -1, -1 }, { -1, -1 }, {  1,  0 }  } }, // { -1, -2 }
                  { {  { -1, -1 }, { -1,  0 }, { -1, -1 }  } }, // { -3, -2 }
                  { {  { -1, -1 }, { -1,  0 }, { -1,  0 }  } }, // { -3, -1 }
                  { {  { -1, -1 }, { -1,  0 }, { -1,  1 }  } }, // { -3,  0 }
                  { {  { -1, -1 }, { -1,  0 }, {  0, -1 }  } }, // { -2, -2 }
                  { {  { -1, -1 }, { -1,  0 }, {  0,  1 }  } }, // { -2,  0 }
                  { {  { -1, -1 }, { -1,  0 }, {  1, -1 }  } }, // { -1, -2 }
                  { {  { -1, -1 }, { -1,  0 }, {  1,  1 }  } }, // { -1,  0 }
                  { {  { -1, -1 }, { -1,  1 }, { -1, -1 }  } }, // { -3, -1 }
                  { {  { -1, -1 }, { -1,  1 }, { -1,  0 }  } }, // { -3,  0 }
                  { {  { -1, -1 }, { -1,  1 }, { -1,  1 }  } }, // { -3,  1 }
                  { {  { -1, -1 }, { -1,  1 }, {  0, -1 }  } }, // { -2, -1 }
                  { {  { -1, -1 }, { -1,  1 }, {  0,  1 }  } }, // { -2,  1 }
                  { {  { -1, -1 }, { -1,  1 }, {  1,  0 }  } }, // { -1,  0 }
                  { {  { -1, -1 }, { -1,  1 }, {  1,  1 }  } }, // { -1,  1 }
                  { {  { -1, -1 }, {  0, -1 }, { -1, -1 }  } }, // { -2, -3 }
                  { {  { -1, -1 }, {  0, -1 }, { -1,  0 }  } }, // { -2, -2 }
                  { {  { -1, -1 }, {  0, -1 }, { -1,  1 }  } }, // { -2, -1 }
                  { {  { -1, -1 }, {  0, -1 }, {  0, -1 }  } }, // { -1, -3 }
                  { {  { -1, -1 }, {  0, -1 }, {  1, -1 }  } }, // {  0, -3 }
                  { {  { -1, -1 }, {  0, -1 }, {  1,  0 }  } }, // {  0, -2 }
                  { {  { -1, -1 }, {  0, -1 }, {  1,  1 }  } }, // {  0, -1 }
                  { {  { -1, -1 }, {  0,  1 }, { -1, -1 }  } }, // { -2, -1 }
                  { {  { -1, -1 }, {  0,  1 }, { -1,  0 }  } }, // { -2,  0 }
                  { {  { -1, -1 }, {  0,  1 }, { -1,  1 }  } }, // { -2,  1 }
                  { {  { -1, -1 }, {  0,  1 }, {  0,  1 }  } }, // { -1,  1 }
                  { {  { -1, -1 }, {  0,  1 }, {  1, -1 }  } }, // {  0, -1 }
                  { {  { -1, -1 }, {  0,  1 }, {  1,  1 }  } }, // {  0,  1 }
                  { {  { -1, -1 }, {  1, -1 }, { -1, -1 }  } }, // { -1, -3 }
                  { {  { -1, -1 }, {  1, -1 }, { -1,  0 }  } }, // { -1, -2 }
                  { {  { -1, -1 }, {  1, -1 }, {  0, -1 }  } }, // {  0, -3 }
                  { {  { -1, -1 }, {  1, -1 }, {  0,  1 }  } }, // {  0, -1 }
                  { {  { -1, -1 }, {  1, -1 }, {  1, -1 }  } }, // {  1, -3 }
                  { {  { -1, -1 }, {  1, -1 }, {  1,  0 }  } }, // {  1, -2 }
                  { {  { -1, -1 }, {  1, -1 }, {  1,  1 }  } }, // {  1, -1 }
                  { {  { -1, -1 }, {  1,  0 }, { -1, -1 }  } }, // { -1, -2 }
                  { {  { -1, -1 }, {  1,  0 }, { -1,  1 }  } }, // { -1,  0 }
                  { {  { -1, -1 }, {  1,  0 }, {  0, -1 }  } }, // {  0, -2 }
                  { {  { -1, -1 }, {  1,  0 }, {  1, -1 }  } }, // {  1, -2 }
                  { {  { -1, -1 }, {  1,  0 }, {  1,  0 }  } }, // {  1, -1 }
                  { {  { -1, -1 }, {  1,  0 }, {  1,  1 }  } }, // {  1,  0 }
                  { {  { -1,  0 }, { -1, -1 }, { -1, -1 }  } }, // { -3, -2 }
                  { {  { -1,  0 }, { -1, -1 }, { -1,  0 }  } }, // { -3, -1 }
                  { {  { -1,  0 }, { -1, -1 }, { -1,  1 }  } }, // { -3,  0 }
                  { {  { -1,  0 }, { -1, -1 }, {  0, -1 }  } }, // { -2, -2 }
                  { {  { -1,  0 }, { -1, -1 }, {  0,  1 }  } }, // { -2,  0 }
                  { {  { -1,  0 }, { -1, -1 }, {  1, -1 }  } }, // { -1, -2 }
                  { {  { -1,  0 }, { -1, -1 }, {  1,  0 }  } }, // { -1, -1 }
                  { {  { -1,  0 }, { -1,  0 }, { -1, -1 }  } }, // { -3, -1 }
                  { {  { -1,  0 }, { -1,  0 }, { -1,  0 }  } }, // { -3,  0 }
                  { {  { -1,  0 }, { -1,  0 }, { -1,  1 }  } }, // { -3,  1 }
                  { {  { -1,  0 }, { -1,  0 }, {  0, -1 }  } }, // { -2, -1 }
                  { {  { -1,  0 }, { -1,  0 }, {  0,  1 }  } }, // { -2,  1 }
                  { {  { -1,  0 }, { -1,  0 }, {  1, -1 }  } }, // { -1, -1 }
                  { {  { -1,  0 }, { -1,  0 }, {  1,  1 }  } }, // { -1,  1 }
                  { {  { -1,  0 }, { -1,  1 }, { -1, -1 }  } }, // { -3,  0 }
                  { {  { -1,  0 }, { -1,  1 }, { -1,  0 }  } }, // { -3,  1 }
                  { {  { -1,  0 }, { -1,  1 }, { -1,  1 }  } }, // { -3,  2 }
                  { {  { -1,  0 }, { -1,  1 }, {  0, -1 }  } }, // { -2,  0 }
                  { {  { -1,  0 }, { -1,  1 }, {  0,  1 }  } }, // { -2,  2 }
                  { {  { -1,  0 }, { -1,  1 }, {  1,  0 }  } }, // { -1,  1 }
                  { {  { -1,  0 }, { -1,  1 }, {  1,  1 }  } }, // { -1,  2 }
                  { {  { -1,  0 }, {  0, -1 }, { -1, -1 }  } }, // { -2, -2 }
                  { {  { -1,  0 }, {  0, -1 }, { -1,  0 }  } }, // { -2, -1 }
                  { {  { -1,  0 }, {  0, -1 }, { -1,  1 }  } }, // { -2,  0 }
                  { {  { -1,  0 }, {  0, -1 }, {  0, -1 }  } }, // { -1, -2 }
                  { {  { -1,  0 }, {  0, -1 }, {  1, -1 }  } }, // {  0, -2 }
                  { {  { -1,  0 }, {  0, -1 }, {  1,  0 }  } }, // {  0, -1 }
                  { {  { -1,  0 }, {  0,  1 }, { -1, -1 }  } }, // { -2,  0 }
                  { {  { -1,  0 }, {  0,  1 }, { -1,  0 }  } }, // { -2,  1 }
                  { {  { -1,  0 }, {  0,  1 }, { -1,  1 }  } }, // { -2,  2 }
                  { {  { -1,  0 }, {  0,  1 }, {  0,  1 }  } }, // { -1,  2 }
                  { {  { -1,  0 }, {  0,  1 }, {  1,  0 }  } }, // {  0,  1 }
                  { {  { -1,  0 }, {  0,  1 }, {  1,  1 }  } }, // {  0,  2 }
                  { {  { -1,  0 }, {  1, -1 }, { -1, -1 }  } }, // { -1, -2 }
                  { {  { -1,  0 }, {  1, -1 }, { -1,  0 }  } }, // { -1, -1 }
                  { {  { -1,  0 }, {  1, -1 }, {  0, -1 }  } }, // {  0, -2 }
                  { {  { -1,  0 }, {  1, -1 }, {  1, -1 }  } }, // {  1, -2 }
                  { {  { -1,  0 }, {  1, -1 }, {  1,  0 }  } }, // {  1, -1 }
                  { {  { -1,  0 }, {  1, -1 }, {  1,  1 }  } }, // {  1,  0 }
                  { {  { -1,  0 }, {  1,  1 }, { -1,  0 }  } }, // { -1,  1 }
                  { {  { -1,  0 }, {  1,  1 }, { -1,  1 }  } }, // { -1,  2 }
                  { {  { -1,  0 }, {  1,  1 }, {  0,  1 }  } }, // {  0,  2 }
                  { {  { -1,  0 }, {  1,  1 }, {  1, -1 }  } }, // {  1,  0 }
                  { {  { -1,  0 }, {  1,  1 }, {  1,  0 }  } }, // {  1,  1 }
                  { {  { -1,  0 }, {  1,  1 }, {  1,  1 }  } }, // {  1,  2 }
                  { {  { -1,  1 }, { -1, -1 }, { -1, -1 }  } }, // { -3, -1 }
                  { {  { -1,  1 }, { -1, -1 }, { -1,  0 }  } }, // { -3,  0 }
                  { {  { -1,  1 }, { -1, -1 }, { -1,  1 }  } }, // { -3,  1 }
                  { {  { -1,  1 }, { -1, -1 }, {  0, -1 }  } }, // { -2, -1 }
                  { {  { -1,  1 }, { -1, -1 }, {  0,  1 }  } }, // { -2,  1 }
                  { {  { -1,  1 }, { -1, -1 }, {  1, -1 }  } }, // { -1, -1 }
                  { {  { -1,  1 }, { -1, -1 }, {  1,  0 }  } }, // { -1,  0 }
                  { {  { -1,  1 }, { -1,  0 }, { -1, -1 }  } }, // { -3,  0 }
                  { {  { -1,  1 }, { -1,  0 }, { -1,  0 }  } }, // { -3,  1 }
                  { {  { -1,  1 }, { -1,  0 }, { -1,  1 }  } }, // { -3,  2 }
                  { {  { -1,  1 }, { -1,  0 }, {  0, -1 }  } }, // { -2,  0 }
                  { {  { -1,  1 }, { -1,  0 }, {  0,  1 }  } }, // { -2,  2 }
                  { {  { -1,  1 }, { -1,  0 }, {  1, -1 }  } }, // { -1,  0 }
                  { {  { -1,  1 }, { -1,  0 }, {  1,  1 }  } }, // { -1,  2 }
                  { {  { -1,  1 }, { -1,  1 }, { -1, -1 }  } }, // { -3,  1 }
                  { {  { -1,  1 }, { -1,  1 }, { -1,  0 }  } }, // { -3,  2 }
                  { {  { -1,  1 }, { -1,  1 }, { -1,  1 }  } }, // { -3,  3 }
                  { {  { -1,  1 }, { -1,  1 }, {  0, -1 }  } }, // { -2,  1 }
                  { {  { -1,  1 }, { -1,  1 }, {  0,  1 }  } }, // { -2,  3 }
                  { {  { -1,  1 }, { -1,  1 }, {  1,  0 }  } }, // { -1,  2 }
                  { {  { -1,  1 }, { -1,  1 }, {  1,  1 }  } }, // { -1,  3 }
                  { {  { -1,  1 }, {  0, -1 }, { -1, -1 }  } }, // { -2, -1 }
                  { {  { -1,  1 }, {  0, -1 }, { -1,  0 }  } }, // { -2,  0 }
                  { {  { -1,  1 }, {  0, -1 }, { -1,  1 }  } }, // { -2,  1 }
                  { {  { -1,  1 }, {  0, -1 }, {  0, -1 }  } }, // { -1, -1 }
                  { {  { -1,  1 }, {  0, -1 }, {  1, -1 }  } }, // {  0, -1 }
                  { {  { -1,  1 }, {  0, -1 }, {  1,  1 }  } }, // {  0,  1 }
                  { {  { -1,  1 }, {  0,  1 }, { -1, -1 }  } }, // { -2,  1 }
                  { {  { -1,  1 }, {  0,  1 }, { -1,  0 }  } }, // { -2,  2 }
                  { {  { -1,  1 }, {  0,  1 }, { -1,  1 }  } }, // { -2,  3 }
                  { {  { -1,  1 }, {  0,  1 }, {  0,  1 }  } }, // { -1,  3 }
                  { {  { -1,  1 }, {  0,  1 }, {  1, -1 }  } }, // {  0,  1 }
                  { {  { -1,  1 }, {  0,  1 }, {  1,  0 }  } }, // {  0,  2 }
                  { {  { -1,  1 }, {  0,  1 }, {  1,  1 }  } }, // {  0,  3 }
                  { {  { -1,  1 }, {  1,  0 }, { -1, -1 }  } }, // { -1,  0 }
                  { {  { -1,  1 }, {  1,  0 }, { -1,  1 }  } }, // { -1,  2 }
                  { {  { -1,  1 }, {  1,  0 }, {  0,  1 }  } }, // {  0,  2 }
                  { {  { -1,  1 }, {  1,  0 }, {  1, -1 }  } }, // {  1,  0 }
                  { {  { -1,  1 }, {  1,  0 }, {  1,  0 }  } }, // {  1,  1 }
                  { {  { -1,  1 }, {  1,  0 }, {  1,  1 }  } }, // {  1,  2 }
                  { {  { -1,  1 }, {  1,  1 }, { -1,  0 }  } }, // { -1,  2 }
                  { {  { -1,  1 }, {  1,  1 }, { -1,  1 }  } }, // { -1,  3 }
                  { {  { -1,  1 }, {  1,  1 }, {  0, -1 }  } }, // {  0,  1 }
                  { {  { -1,  1 }, {  1,  1 }, {  0,  1 }  } }, // {  0,  3 }
                  { {  { -1,  1 }, {  1,  1 }, {  1, -1 }  } }, // {  1,  1 }
                  { {  { -1,  1 }, {  1,  1 }, {  1,  0 }  } }, // {  1,  2 }
                  { {  { -1,  1 }, {  1,  1 }, {  1,  1 }  } }, // {  1,  3 }
                  { {  {  0, -1 }, { -1, -1 }, { -1, -1 }  } }, // { -2, -3 }
                  { {  {  0, -1 }, { -1, -1 }, { -1,  0 }  } }, // { -2, -2 }
                  { {  {  0, -1 }, { -1, -1 }, { -1,  1 }  } }, // { -2, -1 }
                  { {  {  0, -1 }, { -1, -1 }, {  0, -1 }  } }, // { -1, -3 }
                  { {  {  0, -1 }, { -1, -1 }, {  0,  1 }  } }, // { -1, -1 }
                  { {  {  0, -1 }, { -1, -1 }, {  1, -1 }  } }, // {  0, -3 }
                  { {  {  0, -1 }, { -1, -1 }, {  1,  0 }  } }, // {  0, -2 }
                  { {  {  0, -1 }, { -1,  0 }, { -1, -1 }  } }, // { -2, -2 }
                  { {  {  0, -1 }, { -1,  0 }, { -1,  0 }  } }, // { -2, -1 }
                  { {  {  0, -1 }, { -1,  0 }, { -1,  1 }  } }, // { -2,  0 }
                  { {  {  0, -1 }, { -1,  0 }, {  0, -1 }  } }, // { -1, -2 }
                  { {  {  0, -1 }, { -1,  0 }, {  0,  1 }  } }, // { -1,  0 }
                  { {  {  0, -1 }, { -1,  0 }, {  1, -1 }  } }, // {  0, -2 }
                  { {  {  0, -1 }, { -1,  1 }, { -1, -1 }  } }, // { -2, -1 }
                  { {  {  0, -1 }, { -1,  1 }, { -1,  0 }  } }, // { -2,  0 }
                  { {  {  0, -1 }, { -1,  1 }, { -1,  1 }  } }, // { -2,  1 }
                  { {  {  0, -1 }, { -1,  1 }, {  0, -1 }  } }, // { -1, -1 }
                  { {  {  0, -1 }, { -1,  1 }, {  0,  1 }  } }, // { -1,  1 }
                  { {  {  0, -1 }, { -1,  1 }, {  1,  1 }  } }, // {  0,  1 }
                  { {  {  0, -1 }, {  0, -1 }, { -1, -1 }  } }, // { -1, -3 }
                  { {  {  0, -1 }, {  0, -1 }, { -1,  0 }  } }, // { -1, -2 }
                  { {  {  0, -1 }, {  0, -1 }, { -1,  1 }  } }, // { -1, -1 }
                  { {  {  0, -1 }, {  0, -1 }, {  0, -1 }  } }, // {  0, -3 }
                  { {  {  0, -1 }, {  0, -1 }, {  1, -1 }  } }, // {  1, -3 }
                  { {  {  0, -1 }, {  0, -1 }, {  1,  0 }  } }, // {  1, -2 }
                  { {  {  0, -1 }, {  0, -1 }, {  1,  1 }  } }, // {  1, -1 }
                  { {  {  0, -1 }, {  1, -1 }, { -1, -1 }  } }, // {  0, -3 }
                  { {  {  0, -1 }, {  1, -1 }, { -1,  0 }  } }, // {  0, -2 }
                  { {  {  0, -1 }, {  1, -1 }, {  0, -1 }  } }, // {  1, -3 }
                  { {  {  0, -1 }, {  1, -1 }, {  0,  1 }  } }, // {  1, -1 }
                  { {  {  0, -1 }, {  1, -1 }, {  1, -1 }  } }, // {  2, -3 }
                  { {  {  0, -1 }, {  1, -1 }, {  1,  0 }  } }, // {  2, -2 }
                  { {  {  0, -1 }, {  1, -1 }, {  1,  1 }  } }, // {  2, -1 }
                  { {  {  0, -1 }, {  1,  0 }, { -1, -1 }  } }, // {  0, -2 }
                  { {  {  0, -1 }, {  1,  0 }, {  0, -1 }  } }, // {  1, -2 }
                  { {  {  0, -1 }, {  1,  0 }, {  0,  1 }  } }, // {  1,  0 }
                  { {  {  0, -1 }, {  1,  0 }, {  1, -1 }  } }, // {  2, -2 }
                  { {  {  0, -1 }, {  1,  0 }, {  1,  0 }  } }, // {  2, -1 }
                  { {  {  0, -1 }, {  1,  0 }, {  1,  1 }  } }, // {  2,  0 }
                  { {  {  0, -1 }, {  1,  1 }, { -1,  1 }  } }, // {  0,  1 }
                  { {  {  0, -1 }, {  1,  1 }, {  0, -1 }  } }, // {  1, -1 }
                  { {  {  0, -1 }, {  1,  1 }, {  0,  1 }  } }, // {  1,  1 }
                  { {  {  0, -1 }, {  1,  1 }, {  1, -1 }  } }, // {  2, -1 }
                  { {  {  0, -1 }, {  1,  1 }, {  1,  0 }  } }, // {  2,  0 }
                  { {  {  0, -1 }, {  1,  1 }, {  1,  1 }  } }, // {  2,  1 }
                  { {  {  0,  1 }, { -1, -1 }, { -1, -1 }  } }, // { -2, -1 }
                  { {  {  0,  1 }, { -1, -1 }, { -1,  0 }  } }, // { -2,  0 }
                  { {  {  0,  1 }, { -1, -1 }, { -1,  1 }  } }, // { -2,  1 }
                  { {  {  0,  1 }, { -1, -1 }, {  0, -1 }  } }, // { -1, -1 }
                  { {  {  0,  1 }, { -1, -1 }, {  0,  1 }  } }, // { -1,  1 }
                  { {  {  0,  1 }, { -1, -1 }, {  1, -1 }  } }, // {  0, -1 }
                  { {  {  0,  1 }, { -1,  0 }, { -1, -1 }  } }, // { -2,  0 }
                  { {  {  0,  1 }, { -1,  0 }, { -1,  0 }  } }, // { -2,  1 }
                  { {  {  0,  1 }, { -1,  0 }, { -1,  1 }  } }, // { -2,  2 }
                  { {  {  0,  1 }, { -1,  0 }, {  0, -1 }  } }, // { -1,  0 }
                  { {  {  0,  1 }, { -1,  0 }, {  0,  1 }  } }, // { -1,  2 }
                  { {  {  0,  1 }, { -1,  0 }, {  1,  1 }  } }, // {  0,  2 }
                  { {  {  0,  1 }, { -1,  1 }, { -1, -1 }  } }, // { -2,  1 }
                  { {  {  0,  1 }, { -1,  1 }, { -1,  0 }  } }, // { -2,  2 }
                  { {  {  0,  1 }, { -1,  1 }, { -1,  1 }  } }, // { -2,  3 }
                  { {  {  0,  1 }, { -1,  1 }, {  0, -1 }  } }, // { -1,  1 }
                  { {  {  0,  1 }, { -1,  1 }, {  0,  1 }  } }, // { -1,  3 }
                  { {  {  0,  1 }, { -1,  1 }, {  1,  0 }  } }, // {  0,  2 }
                  { {  {  0,  1 }, { -1,  1 }, {  1,  1 }  } }, // {  0,  3 }
                  { {  {  0,  1 }, {  0,  1 }, { -1, -1 }  } }, // { -1,  1 }
                  { {  {  0,  1 }, {  0,  1 }, { -1,  0 }  } }, // { -1,  2 }
                  { {  {  0,  1 }, {  0,  1 }, { -1,  1 }  } }, // { -1,  3 }
                  { {  {  0,  1 }, {  0,  1 }, {  0,  1 }  } }, // {  0,  3 }
                  { {  {  0,  1 }, {  0,  1 }, {  1, -1 }  } }, // {  1,  1 }
                  { {  {  0,  1 }, {  0,  1 }, {  1,  0 }  } }, // {  1,  2 }
                  { {  {  0,  1 }, {  0,  1 }, {  1,  1 }  } }, // {  1,  3 }
                  { {  {  0,  1 }, {  1, -1 }, { -1, -1 }  } }, // {  0, -1 }
                  { {  {  0,  1 }, {  1, -1 }, {  0, -1 }  } }, // {  1, -1 }
                  { {  {  0,  1 }, {  1, -1 }, {  0,  1 }  } }, // {  1,  1 }
                  { {  {  0,  1 }, {  1, -1 }, {  1, -1 }  } }, // {  2, -1 }
                  { {  {  0,  1 }, {  1, -1 }, {  1,  0 }  } }, // {  2,  0 }
                  { {  {  0,  1 }, {  1, -1 }, {  1,  1 }  } }, // {  2,  1 }
                  { {  {  0,  1 }, {  1,  0 }, { -1,  1 }  } }, // {  0,  2 }
                  { {  {  0,  1 }, {  1,  0 }, {  0, -1 }  } }, // {  1,  0 }
                  { {  {  0,  1 }, {  1,  0 }, {  0,  1 }  } }, // {  1,  2 }
                  { {  {  0,  1 }, {  1,  0 }, {  1, -1 }  } }, // {  2,  0 }
                  { {  {  0,  1 }, {  1,  0 }, {  1,  0 }  } }, // {  2,  1 }
                  { {  {  0,  1 }, {  1,  0 }, {  1,  1 }  } }, // {  2,  2 }
                  { {  {  0,  1 }, {  1,  1 }, { -1,  0 }  } }, // {  0,  2 }
                  { {  {  0,  1 }, {  1,  1 }, { -1,  1 }  } }, // {  0,  3 }
                  { {  {  0,  1 }, {  1,  1 }, {  0, -1 }  } }, // {  1,  1 }
                  { {  {  0,  1 }, {  1,  1 }, {  0,  1 }  } }, // {  1,  3 }
                  { {  {  0,  1 }, {  1,  1 }, {  1, -1 }  } }, // {  2,  1 }
                  { {  {  0,  1 }, {  1,  1 }, {  1,  0 }  } }, // {  2,  2 }
                  { {  {  0,  1 }, {  1,  1 }, {  1,  1 }  } }, // {  2,  3 }
                  { {  {  1, -1 }, { -1, -1 }, { -1, -1 }  } }, // { -1, -3 }
                  { {  {  1, -1 }, { -1, -1 }, { -1,  0 }  } }, // { -1, -2 }
                  { {  {  1, -1 }, { -1, -1 }, { -1,  1 }  } }, // { -1, -1 }
                  { {  {  1, -1 }, { -1, -1 }, {  0, -1 }  } }, // {  0, -3 }
                  { {  {  1, -1 }, { -1, -1 }, {  0,  1 }  } }, // {  0, -1 }
                  { {  {  1, -1 }, { -1, -1 }, {  1, -1 }  } }, // {  1, -3 }
                  { {  {  1, -1 }, { -1, -1 }, {  1,  0 }  } }, // {  1, -2 }
                  { {  {  1, -1 }, { -1,  0 }, { -1, -1 }  } }, // { -1, -2 }
                  { {  {  1, -1 }, { -1,  0 }, { -1,  0 }  } }, // { -1, -1 }
                  { {  {  1, -1 }, { -1,  0 }, { -1,  1 }  } }, // { -1,  0 }
                  { {  {  1, -1 }, { -1,  0 }, {  0, -1 }  } }, // {  0, -2 }
                  { {  {  1, -1 }, { -1,  0 }, {  1, -1 }  } }, // {  1, -2 }
                  { {  {  1, -1 }, { -1,  0 }, {  1,  1 }  } }, // {  1,  0 }
                  { {  {  1, -1 }, {  0, -1 }, { -1, -1 }  } }, // {  0, -3 }
                  { {  {  1, -1 }, {  0, -1 }, { -1,  0 }  } }, // {  0, -2 }
                  { {  {  1, -1 }, {  0, -1 }, { -1,  1 }  } }, // {  0, -1 }
                  { {  {  1, -1 }, {  0, -1 }, {  0, -1 }  } }, // {  1, -3 }
                  { {  {  1, -1 }, {  0, -1 }, {  1, -1 }  } }, // {  2, -3 }
                  { {  {  1, -1 }, {  0, -1 }, {  1,  0 }  } }, // {  2, -2 }
                  { {  {  1, -1 }, {  0, -1 }, {  1,  1 }  } }, // {  2, -1 }
                  { {  {  1, -1 }, {  0,  1 }, { -1, -1 }  } }, // {  0, -1 }
                  { {  {  1, -1 }, {  0,  1 }, { -1,  1 }  } }, // {  0,  1 }
                  { {  {  1, -1 }, {  0,  1 }, {  0,  1 }  } }, // {  1,  1 }
                  { {  {  1, -1 }, {  0,  1 }, {  1, -1 }  } }, // {  2, -1 }
                  { {  {  1, -1 }, {  0,  1 }, {  1,  0 }  } }, // {  2,  0 }
                  { {  {  1, -1 }, {  0,  1 }, {  1,  1 }  } }, // {  2,  1 }
                  { {  {  1, -1 }, {  1, -1 }, { -1, -1 }  } }, // {  1, -3 }
                  { {  {  1, -1 }, {  1, -1 }, { -1,  0 }  } }, // {  1, -2 }
                  { {  {  1, -1 }, {  1, -1 }, {  0, -1 }  } }, // {  2, -3 }
                  { {  {  1, -1 }, {  1, -1 }, {  0,  1 }  } }, // {  2, -1 }
                  { {  {  1, -1 }, {  1, -1 }, {  1, -1 }  } }, // {  3, -3 }
                  { {  {  1, -1 }, {  1, -1 }, {  1,  0 }  } }, // {  3, -2 }
                  { {  {  1, -1 }, {  1, -1 }, {  1,  1 }  } }, // {  3, -1 }
                  { {  {  1, -1 }, {  1,  0 }, { -1, -1 }  } }, // {  1, -2 }
                  { {  {  1, -1 }, {  1,  0 }, { -1,  1 }  } }, // {  1,  0 }
                  { {  {  1, -1 }, {  1,  0 }, {  0, -1 }  } }, // {  2, -2 }
                  { {  {  1, -1 }, {  1,  0 }, {  0,  1 }  } }, // {  2,  0 }
                  { {  {  1, -1 }, {  1,  0 }, {  1, -1 }  } }, // {  3, -2 }
                  { {  {  1, -1 }, {  1,  0 }, {  1,  0 }  } }, // {  3, -1 }
                  { {  {  1, -1 }, {  1,  0 }, {  1,  1 }  } }, // {  3,  0 }
                  { {  {  1, -1 }, {  1,  1 }, { -1,  0 }  } }, // {  1,  0 }
                  { {  {  1, -1 }, {  1,  1 }, { -1,  1 }  } }, // {  1,  1 }
                  { {  {  1, -1 }, {  1,  1 }, {  0, -1 }  } }, // {  2, -1 }
                  { {  {  1, -1 }, {  1,  1 }, {  0,  1 }  } }, // {  2,  1 }
                  { {  {  1, -1 }, {  1,  1 }, {  1, -1 }  } }, // {  3, -1 }
                  { {  {  1, -1 }, {  1,  1 }, {  1,  0 }  } }, // {  3,  0 }
                  { {  {  1, -1 }, {  1,  1 }, {  1,  1 }  } }, // {  3,  1 }
                  { {  {  1,  0 }, { -1, -1 }, { -1, -1 }  } }, // { -1, -2 }
                  { {  {  1,  0 }, { -1, -1 }, { -1,  0 }  } }, // { -1, -1 }
                  { {  {  1,  0 }, { -1, -1 }, { -1,  1 }  } }, // { -1,  0 }
                  { {  {  1,  0 }, { -1, -1 }, {  0, -1 }  } }, // {  0, -2 }
                  { {  {  1,  0 }, { -1, -1 }, {  1, -1 }  } }, // {  1, -2 }
                  { {  {  1,  0 }, { -1, -1 }, {  1,  0 }  } }, // {  1, -1 }
                  { {  {  1,  0 }, { -1,  1 }, { -1, -1 }  } }, // { -1,  0 }
                  { {  {  1,  0 }, { -1,  1 }, { -1,  0 }  } }, // { -1,  1 }
                  { {  {  1,  0 }, { -1,  1 }, { -1,  1 }  } }, // { -1,  2 }
                  { {  {  1,  0 }, { -1,  1 }, {  0,  1 }  } }, // {  0,  2 }
                  { {  {  1,  0 }, { -1,  1 }, {  1,  0 }  } }, // {  1,  1 }
                  { {  {  1,  0 }, { -1,  1 }, {  1,  1 }  } }, // {  1,  2 }
                  { {  {  1,  0 }, {  0, -1 }, { -1, -1 }  } }, // {  0, -2 }
                  { {  {  1,  0 }, {  0, -1 }, { -1,  0 }  } }, // {  0, -1 }
                  { {  {  1,  0 }, {  0, -1 }, {  0, -1 }  } }, // {  1, -2 }
                  { {  {  1,  0 }, {  0, -1 }, {  1, -1 }  } }, // {  2, -2 }
                  { {  {  1,  0 }, {  0, -1 }, {  1,  0 }  } }, // {  2, -1 }
                  { {  {  1,  0 }, {  0, -1 }, {  1,  1 }  } }, // {  2,  0 }
                  { {  {  1,  0 }, {  0,  1 }, { -1,  0 }  } }, // {  0,  1 }
                  { {  {  1,  0 }, {  0,  1 }, { -1,  1 }  } }, // {  0,  2 }
                  { {  {  1,  0 }, {  0,  1 }, {  0,  1 }  } }, // {  1,  2 }
                  { {  {  1,  0 }, {  0,  1 }, {  1, -1 }  } }, // {  2,  0 }
                  { {  {  1,  0 }, {  0,  1 }, {  1,  0 }  } }, // {  2,  1 }
                  { {  {  1,  0 }, {  0,  1 }, {  1,  1 }  } }, // {  2,  2 }
                  { {  {  1,  0 }, {  1, -1 }, { -1, -1 }  } }, // {  1, -2 }
                  { {  {  1,  0 }, {  1, -1 }, { -1,  0 }  } }, // {  1, -1 }
                  { {  {  1,  0 }, {  1, -1 }, {  0, -1 }  } }, // {  2, -2 }
                  { {  {  1,  0 }, {  1, -1 }, {  0,  1 }  } }, // {  2,  0 }
                  { {  {  1,  0 }, {  1, -1 }, {  1, -1 }  } }, // {  3, -2 }
                  { {  {  1,  0 }, {  1, -1 }, {  1,  0 }  } }, // {  3, -1 }
                  { {  {  1,  0 }, {  1, -1 }, {  1,  1 }  } }, // {  3,  0 }
                  { {  {  1,  0 }, {  1,  0 }, { -1, -1 }  } }, // {  1, -1 }
                  { {  {  1,  0 }, {  1,  0 }, { -1,  1 }  } }, // {  1,  1 }
                  { {  {  1,  0 }, {  1,  0 }, {  0, -1 }  } }, // {  2, -1 }
                  { {  {  1,  0 }, {  1,  0 }, {  0,  1 }  } }, // {  2,  1 }
                  { {  {  1,  0 }, {  1,  0 }, {  1, -1 }  } }, // {  3, -1 }
                  { {  {  1,  0 }, {  1,  0 }, {  1,  0 }  } }, // {  3,  0 }
                  { {  {  1,  0 }, {  1,  0 }, {  1,  1 }  } }, // {  3,  1 }
                  { {  {  1,  0 }, {  1,  1 }, { -1,  0 }  } }, // {  1,  1 }
                  { {  {  1,  0 }, {  1,  1 }, { -1,  1 }  } }, // {  1,  2 }
                  { {  {  1,  0 }, {  1,  1 }, {  0, -1 }  } }, // {  2,  0 }
                  { {  {  1,  0 }, {  1,  1 }, {  0,  1 }  } }, // {  2,  2 }
                  { {  {  1,  0 }, {  1,  1 }, {  1, -1 }  } }, // {  3,  0 }
                  { {  {  1,  0 }, {  1,  1 }, {  1,  0 }  } }, // {  3,  1 }
                  { {  {  1,  0 }, {  1,  1 }, {  1,  1 }  } }, // {  3,  2 }
                  { {  {  1,  1 }, { -1,  0 }, { -1, -1 }  } }, // { -1,  0 }
                  { {  {  1,  1 }, { -1,  0 }, { -1,  0 }  } }, // { -1,  1 }
                  { {  {  1,  1 }, { -1,  0 }, { -1,  1 }  } }, // { -1,  2 }
                  { {  {  1,  1 }, { -1,  0 }, {  0,  1 }  } }, // {  0,  2 }
                  { {  {  1,  1 }, { -1,  0 }, {  1, -1 }  } }, // {  1,  0 }
                  { {  {  1,  1 }, { -1,  0 }, {  1,  1 }  } }, // {  1,  2 }
                  { {  {  1,  1 }, { -1,  1 }, { -1, -1 }  } }, // { -1,  1 }
                  { {  {  1,  1 }, { -1,  1 }, { -1,  0 }  } }, // { -1,  2 }
                  { {  {  1,  1 }, { -1,  1 }, { -1,  1 }  } }, // { -1,  3 }
                  { {  {  1,  1 }, { -1,  1 }, {  0, -1 }  } }, // {  0,  1 }
                  { {  {  1,  1 }, { -1,  1 }, {  0,  1 }  } }, // {  0,  3 }
                  { {  {  1,  1 }, { -1,  1 }, {  1,  0 }  } }, // {  1,  2 }
                  { {  {  1,  1 }, { -1,  1 }, {  1,  1 }  } }, // {  1,  3 }
                  { {  {  1,  1 }, {  0, -1 }, { -1, -1 }  } }, // {  0, -1 }
                  { {  {  1,  1 }, {  0, -1 }, { -1,  1 }  } }, // {  0,  1 }
                  { {  {  1,  1 }, {  0, -1 }, {  0, -1 }  } }, // {  1, -1 }
                  { {  {  1,  1 }, {  0, -1 }, {  1, -1 }  } }, // {  2, -1 }
                  { {  {  1,  1 }, {  0, -1 }, {  1,  0 }  } }, // {  2,  0 }
                  { {  {  1,  1 }, {  0, -1 }, {  1,  1 }  } }, // {  2,  1 }
                  { {  {  1,  1 }, {  0,  1 }, { -1, -1 }  } }, // {  0,  1 }
                  { {  {  1,  1 }, {  0,  1 }, { -1,  0 }  } }, // {  0,  2 }
                  { {  {  1,  1 }, {  0,  1 }, { -1,  1 }  } }, // {  0,  3 }
                  { {  {  1,  1 }, {  0,  1 }, {  0,  1 }  } }, // {  1,  3 }
                  { {  {  1,  1 }, {  0,  1 }, {  1, -1 }  } }, // {  2,  1 }
                  { {  {  1,  1 }, {  0,  1 }, {  1,  0 }  } }, // {  2,  2 }
                  { {  {  1,  1 }, {  0,  1 }, {  1,  1 }  } }, // {  2,  3 }
                  { {  {  1,  1 }, {  1, -1 }, { -1, -1 }  } }, // {  1, -1 }
                  { {  {  1,  1 }, {  1, -1 }, { -1,  0 }  } }, // {  1,  0 }
                  { {  {  1,  1 }, {  1, -1 }, {  0, -1 }  } }, // {  2, -1 }
                  { {  {  1,  1 }, {  1, -1 }, {  0,  1 }  } }, // {  2,  1 }
                  { {  {  1,  1 }, {  1, -1 }, {  1, -1 }  } }, // {  3, -1 }
                  { {  {  1,  1 }, {  1, -1 }, {  1,  0 }  } }, // {  3,  0 }
                  { {  {  1,  1 }, {  1, -1 }, {  1,  1 }  } }, // {  3,  1 }
                  { {  {  1,  1 }, {  1,  0 }, { -1, -1 }  } }, // {  1,  0 }
                  { {  {  1,  1 }, {  1,  0 }, { -1,  1 }  } }, // {  1,  2 }
                  { {  {  1,  1 }, {  1,  0 }, {  0, -1 }  } }, // {  2,  0 }
                  { {  {  1,  1 }, {  1,  0 }, {  0,  1 }  } }, // {  2,  2 }
                  { {  {  1,  1 }, {  1,  0 }, {  1, -1 }  } }, // {  3,  0 }
                  { {  {  1,  1 }, {  1,  0 }, {  1,  0 }  } }, // {  3,  1 }
                  { {  {  1,  1 }, {  1,  0 }, {  1,  1 }  } }, // {  3,  2 }
                  { {  {  1,  1 }, {  1,  1 }, { -1,  0 }  } }, // {  1,  2 }
                  { {  {  1,  1 }, {  1,  1 }, { -1,  1 }  } }, // {  1,  3 }
                  { {  {  1,  1 }, {  1,  1 }, {  0, -1 }  } }, // {  2,  1 }
                  { {  {  1,  1 }, {  1,  1 }, {  0,  1 }  } }, // {  2,  3 }
                  { {  {  1,  1 }, {  1,  1 }, {  1, -1 }  } }, // {  3,  1 }
                  { {  {  1,  1 }, {  1,  1 }, {  1,  0 }  } }, // {  3,  2 }
                  { {  {  1,  1 }, {  1,  1 }, {  1,  1 }  } }, // {  3,  3 }
                } ) {
      // empty
    }

    /************************************************************/
    PrincessPiecePaths::PrincessPiecePaths( )
      : PiecePaths( 
                {
                  // Since the princess can jump, we only need to record the endpoints of the paths, not the intermediate ones.
                  // 3 rows up
                  { {  {  3,  3 },  } },
                  { {  {  2,  3 },  } },
                  { {  {  1,  3 },  } },
                  { {  {  0,  3 },  } },
                  { {  { -1,  3 },  } },
                  { {  { -2,  3 },  } },
                  { {  { -3,  3 },  } },
                  // 2 rows up
                  { {  {  3,  2 },  } },
                  { {  {  2,  2 },  } },
                  { {  {  1,  2 },  } },
                  { {  {  0,  2 },  } },
                  { {  { -1,  2 },  } },
                  { {  { -2,  2 },  } },
                  { {  { -3,  2 },  } },
                  // 1 row up
                  { {  {  3,  1 },  } },
                  { {  {  2,  1 },  } },
                  { {  {  1,  1 },  } },
                  { {  {  0,  1 },  } },
                  { {  { -1,  1 },  } },
                  { {  { -2,  1 },  } },
                  { {  { -3,  1 },  } },
                  // 0 rows up
                  { {  {  3,  0 },  } },
                  { {  {  2,  0 },  } },
                  { {  {  1,  0 },  } },
                  //{ {  0,  0 }, },
                  { {  { -1,  0 },  } },
                  { {  { -2,  0 },  } },
                  { {  { -3,  0 },  } },
                  // 1 row down
                  { {  {  3, -1 },  } },
                  { {  {  2, -1 },  } },
                  { {  {  1, -1 },  } },
                  { {  {  0, -1 },  } },
                  { {  { -1, -1 },  } },
                  { {  { -2, -1 },  } },
                  { {  { -3, -1 },  } },
                  // 2 rows down
                  { {  {  3, -2 },  } },
                  { {  {  2, -2 },  } },
                  { {  {  1, -2 },  } },
                  { {  {  0, -2 },  } },
                  { {  { -1, -2 },  } },
                  { {  { -2, -2 },  } },
                  { {  { -3, -2 },  } },
                  // 3 rows down
                  { {  {  3, -3 },  } },
                  { {  {  2, -3 },  } },
                  { {  {  1, -3 },  } },
                  { {  {  0, -3 },  } },
                  { {  { -1, -3 },  } },
                  { {  { -2, -3 },  } },
                  { {  { -3, -3 },  } },
                } ) {
      // empty
    }

    /************************************************************/
    PrincessPieceEscapePaths::PrincessPieceEscapePaths( )
      : PiecePaths( 
                {
                  { { { -10, -10 }, } },
                  { { {  -9, -10 }, } },
                  { { {  -8, -10 }, } },
                  { { {  -7, -10 }, } },
                  { { {  -6, -10 }, } },
                  { { {  -5, -10 }, } },
                  { { {  -4, -10 }, } },
                  { { {  -3, -10 }, } },
                  { { {  -2, -10 }, } },
                  { { {  -1, -10 }, } },
                  { { {   0, -10 }, } },
                  { { {   1, -10 }, } },
                  { { {   2, -10 }, } },
                  { { {   3, -10 }, } },
                  { { {   4, -10 }, } },
                  { { {   5, -10 }, } },
                  { { {   6, -10 }, } },
                  { { {   7, -10 }, } },
                  { { {   8, -10 }, } },
                  { { {   9, -10 }, } },
                  { { {  10, -10 }, } },
                  { { { -10,  -9 }, } },
                  { { {  -9,  -9 }, } },
                  { { {  -8,  -9 }, } },
                  { { {  -7,  -9 }, } },
                  { { {  -6,  -9 }, } },
                  { { {  -5,  -9 }, } },
                  { { {  -4,  -9 }, } },
                  { { {  -3,  -9 }, } },
                  { { {  -2,  -9 }, } },
                  { { {  -1,  -9 }, } },
                  { { {   0,  -9 }, } },
                  { { {   1,  -9 }, } },
                  { { {   2,  -9 }, } },
                  { { {   3,  -9 }, } },
                  { { {   4,  -9 }, } },
                  { { {   5,  -9 }, } },
                  { { {   6,  -9 }, } },
                  { { {   7,  -9 }, } },
                  { { {   8,  -9 }, } },
                  { { {   9,  -9 }, } },
                  { { {  10,  -9 }, } },
                  { { { -10,  -8 }, } },
                  { { {  -9,  -8 }, } },
                  { { {  -8,  -8 }, } },
                  { { {  -7,  -8 }, } },
                  { { {  -6,  -8 }, } },
                  { { {  -5,  -8 }, } },
                  { { {  -4,  -8 }, } },
                  { { {  -3,  -8 }, } },
                  { { {  -2,  -8 }, } },
                  { { {  -1,  -8 }, } },
                  { { {   0,  -8 }, } },
                  { { {   1,  -8 }, } },
                  { { {   2,  -8 }, } },
                  { { {   3,  -8 }, } },
                  { { {   4,  -8 }, } },
                  { { {   5,  -8 }, } },
                  { { {   6,  -8 }, } },
                  { { {   7,  -8 }, } },
                  { { {   8,  -8 }, } },
                  { { {   9,  -8 }, } },
                  { { {  10,  -8 }, } },
                  { { { -10,  -7 }, } },
                  { { {  -9,  -7 }, } },
                  { { {  -8,  -7 }, } },
                  { { {  -7,  -7 }, } },
                  { { {  -6,  -7 }, } },
                  { { {  -5,  -7 }, } },
                  { { {  -4,  -7 }, } },
                  { { {  -3,  -7 }, } },
                  { { {  -2,  -7 }, } },
                  { { {  -1,  -7 }, } },
                  { { {   0,  -7 }, } },
                  { { {   1,  -7 }, } },
                  { { {   2,  -7 }, } },
                  { { {   3,  -7 }, } },
                  { { {   4,  -7 }, } },
                  { { {   5,  -7 }, } },
                  { { {   6,  -7 }, } },
                  { { {   7,  -7 }, } },
                  { { {   8,  -7 }, } },
                  { { {   9,  -7 }, } },
                  { { {  10,  -7 }, } },
                  { { { -10,  -6 }, } },
                  { { {  -9,  -6 }, } },
                  { { {  -8,  -6 }, } },
                  { { {  -7,  -6 }, } },
                  { { {  -6,  -6 }, } },
                  { { {  -5,  -6 }, } },
                  { { {  -4,  -6 }, } },
                  { { {  -3,  -6 }, } },
                  { { {  -2,  -6 }, } },
                  { { {  -1,  -6 }, } },
                  { { {   0,  -6 }, } },
                  { { {   1,  -6 }, } },
                  { { {   2,  -6 }, } },
                  { { {   3,  -6 }, } },
                  { { {   4,  -6 }, } },
                  { { {   5,  -6 }, } },
                  { { {   6,  -6 }, } },
                  { { {   7,  -6 }, } },
                  { { {   8,  -6 }, } },
                  { { {   9,  -6 }, } },
                  { { {  10,  -6 }, } },
                  { { { -10,  -5 }, } },
                  { { {  -9,  -5 }, } },
                  { { {  -8,  -5 }, } },
                  { { {  -7,  -5 }, } },
                  { { {  -6,  -5 }, } },
                  { { {  -5,  -5 }, } },
                  { { {  -4,  -5 }, } },
                  { { {  -3,  -5 }, } },
                  { { {  -2,  -5 }, } },
                  { { {  -1,  -5 }, } },
                  { { {   0,  -5 }, } },
                  { { {   1,  -5 }, } },
                  { { {   2,  -5 }, } },
                  { { {   3,  -5 }, } },
                  { { {   4,  -5 }, } },
                  { { {   5,  -5 }, } },
                  { { {   6,  -5 }, } },
                  { { {   7,  -5 }, } },
                  { { {   8,  -5 }, } },
                  { { {   9,  -5 }, } },
                  { { {  10,  -5 }, } },
                  { { { -10,  -4 }, } },
                  { { {  -9,  -4 }, } },
                  { { {  -8,  -4 }, } },
                  { { {  -7,  -4 }, } },
                  { { {  -6,  -4 }, } },
                  { { {  -5,  -4 }, } },
                  { { {  -4,  -4 }, } },
                  { { {  -3,  -4 }, } },
                  { { {  -2,  -4 }, } },
                  { { {  -1,  -4 }, } },
                  { { {   0,  -4 }, } },
                  { { {   1,  -4 }, } },
                  { { {   2,  -4 }, } },
                  { { {   3,  -4 }, } },
                  { { {   4,  -4 }, } },
                  { { {   5,  -4 }, } },
                  { { {   6,  -4 }, } },
                  { { {   7,  -4 }, } },
                  { { {   8,  -4 }, } },
                  { { {   9,  -4 }, } },
                  { { {  10,  -4 }, } },
                  { { { -10,  -3 }, } },
                  { { {  -9,  -3 }, } },
                  { { {  -8,  -3 }, } },
                  { { {  -7,  -3 }, } },
                  { { {  -6,  -3 }, } },
                  { { {  -5,  -3 }, } },
                  { { {  -4,  -3 }, } },
                  { { {  -3,  -3 }, } },
                  { { {  -2,  -3 }, } },
                  { { {  -1,  -3 }, } },
                  { { {   0,  -3 }, } },
                  { { {   1,  -3 }, } },
                  { { {   2,  -3 }, } },
                  { { {   3,  -3 }, } },
                  { { {   4,  -3 }, } },
                  { { {   5,  -3 }, } },
                  { { {   6,  -3 }, } },
                  { { {   7,  -3 }, } },
                  { { {   8,  -3 }, } },
                  { { {   9,  -3 }, } },
                  { { {  10,  -3 }, } },
                  { { { -10,  -2 }, } },
                  { { {  -9,  -2 }, } },
                  { { {  -8,  -2 }, } },
                  { { {  -7,  -2 }, } },
                  { { {  -6,  -2 }, } },
                  { { {  -5,  -2 }, } },
                  { { {  -4,  -2 }, } },
                  { { {  -3,  -2 }, } },
                  { { {  -2,  -2 }, } },
                  { { {  -1,  -2 }, } },
                  { { {   0,  -2 }, } },
                  { { {   1,  -2 }, } },
                  { { {   2,  -2 }, } },
                  { { {   3,  -2 }, } },
                  { { {   4,  -2 }, } },
                  { { {   5,  -2 }, } },
                  { { {   6,  -2 }, } },
                  { { {   7,  -2 }, } },
                  { { {   8,  -2 }, } },
                  { { {   9,  -2 }, } },
                  { { {  10,  -2 }, } },
                  { { { -10,  -1 }, } },
                  { { {  -9,  -1 }, } },
                  { { {  -8,  -1 }, } },
                  { { {  -7,  -1 }, } },
                  { { {  -6,  -1 }, } },
                  { { {  -5,  -1 }, } },
                  { { {  -4,  -1 }, } },
                  { { {  -3,  -1 }, } },
                  { { {  -2,  -1 }, } },
                  { { {  -1,  -1 }, } },
                  { { {   0,  -1 }, } },
                  { { {   1,  -1 }, } },
                  { { {   2,  -1 }, } },
                  { { {   3,  -1 }, } },
                  { { {   4,  -1 }, } },
                  { { {   5,  -1 }, } },
                  { { {   6,  -1 }, } },
                  { { {   7,  -1 }, } },
                  { { {   8,  -1 }, } },
                  { { {   9,  -1 }, } },
                  { { {  10,  -1 }, } },
                  { { { -10,   0 }, } },
                  { { {  -9,   0 }, } },
                  { { {  -8,   0 }, } },
                  { { {  -7,   0 }, } },
                  { { {  -6,   0 }, } },
                  { { {  -5,   0 }, } },
                  { { {  -4,   0 }, } },
                  { { {  -3,   0 }, } },
                  { { {  -2,   0 }, } },
                  { { {  -1,   0 }, } },
                  { { {   0,   0 }, } },
                  { { {   1,   0 }, } },
                  { { {   2,   0 }, } },
                  { { {   3,   0 }, } },
                  { { {   4,   0 }, } },
                  { { {   5,   0 }, } },
                  { { {   6,   0 }, } },
                  { { {   7,   0 }, } },
                  { { {   8,   0 }, } },
                  { { {   9,   0 }, } },
                  { { {  10,   0 }, } },
                  { { { -10,   1 }, } },
                  { { {  -9,   1 }, } },
                  { { {  -8,   1 }, } },
                  { { {  -7,   1 }, } },
                  { { {  -6,   1 }, } },
                  { { {  -5,   1 }, } },
                  { { {  -4,   1 }, } },
                  { { {  -3,   1 }, } },
                  { { {  -2,   1 }, } },
                  { { {  -1,   1 }, } },
                  { { {   0,   1 }, } },
                  { { {   1,   1 }, } },
                  { { {   2,   1 }, } },
                  { { {   3,   1 }, } },
                  { { {   4,   1 }, } },
                  { { {   5,   1 }, } },
                  { { {   6,   1 }, } },
                  { { {   7,   1 }, } },
                  { { {   8,   1 }, } },
                  { { {   9,   1 }, } },
                  { { {  10,   1 }, } },
                  { { { -10,   2 }, } },
                  { { {  -9,   2 }, } },
                  { { {  -8,   2 }, } },
                  { { {  -7,   2 }, } },
                  { { {  -6,   2 }, } },
                  { { {  -5,   2 }, } },
                  { { {  -4,   2 }, } },
                  { { {  -3,   2 }, } },
                  { { {  -2,   2 }, } },
                  { { {  -1,   2 }, } },
                  { { {   0,   2 }, } },
                  { { {   1,   2 }, } },
                  { { {   2,   2 }, } },
                  { { {   3,   2 }, } },
                  { { {   4,   2 }, } },
                  { { {   5,   2 }, } },
                  { { {   6,   2 }, } },
                  { { {   7,   2 }, } },
                  { { {   8,   2 }, } },
                  { { {   9,   2 }, } },
                  { { {  10,   2 }, } },
                  { { { -10,   3 }, } },
                  { { {  -9,   3 }, } },
                  { { {  -8,   3 }, } },
                  { { {  -7,   3 }, } },
                  { { {  -6,   3 }, } },
                  { { {  -5,   3 }, } },
                  { { {  -4,   3 }, } },
                  { { {  -3,   3 }, } },
                  { { {  -2,   3 }, } },
                  { { {  -1,   3 }, } },
                  { { {   0,   3 }, } },
                  { { {   1,   3 }, } },
                  { { {   2,   3 }, } },
                  { { {   3,   3 }, } },
                  { { {   4,   3 }, } },
                  { { {   5,   3 }, } },
                  { { {   6,   3 }, } },
                  { { {   7,   3 }, } },
                  { { {   8,   3 }, } },
                  { { {   9,   3 }, } },
                  { { {  10,   3 }, } },
                  { { { -10,   4 }, } },
                  { { {  -9,   4 }, } },
                  { { {  -8,   4 }, } },
                  { { {  -7,   4 }, } },
                  { { {  -6,   4 }, } },
                  { { {  -5,   4 }, } },
                  { { {  -4,   4 }, } },
                  { { {  -3,   4 }, } },
                  { { {  -2,   4 }, } },
                  { { {  -1,   4 }, } },
                  { { {   0,   4 }, } },
                  { { {   1,   4 }, } },
                  { { {   2,   4 }, } },
                  { { {   3,   4 }, } },
                  { { {   4,   4 }, } },
                  { { {   5,   4 }, } },
                  { { {   6,   4 }, } },
                  { { {   7,   4 }, } },
                  { { {   8,   4 }, } },
                  { { {   9,   4 }, } },
                  { { {  10,   4 }, } },
                  { { { -10,   5 }, } },
                  { { {  -9,   5 }, } },
                  { { {  -8,   5 }, } },
                  { { {  -7,   5 }, } },
                  { { {  -6,   5 }, } },
                  { { {  -5,   5 }, } },
                  { { {  -4,   5 }, } },
                  { { {  -3,   5 }, } },
                  { { {  -2,   5 }, } },
                  { { {  -1,   5 }, } },
                  { { {   0,   5 }, } },
                  { { {   1,   5 }, } },
                  { { {   2,   5 }, } },
                  { { {   3,   5 }, } },
                  { { {   4,   5 }, } },
                  { { {   5,   5 }, } },
                  { { {   6,   5 }, } },
                  { { {   7,   5 }, } },
                  { { {   8,   5 }, } },
                  { { {   9,   5 }, } },
                  { { {  10,   5 }, } },
                  { { { -10,   6 }, } },
                  { { {  -9,   6 }, } },
                  { { {  -8,   6 }, } },
                  { { {  -7,   6 }, } },
                  { { {  -6,   6 }, } },
                  { { {  -5,   6 }, } },
                  { { {  -4,   6 }, } },
                  { { {  -3,   6 }, } },
                  { { {  -2,   6 }, } },
                  { { {  -1,   6 }, } },
                  { { {   0,   6 }, } },
                  { { {   1,   6 }, } },
                  { { {   2,   6 }, } },
                  { { {   3,   6 }, } },
                  { { {   4,   6 }, } },
                  { { {   5,   6 }, } },
                  { { {   6,   6 }, } },
                  { { {   7,   6 }, } },
                  { { {   8,   6 }, } },
                  { { {   9,   6 }, } },
                  { { {  10,   6 }, } },
                  { { { -10,   7 }, } },
                  { { {  -9,   7 }, } },
                  { { {  -8,   7 }, } },
                  { { {  -7,   7 }, } },
                  { { {  -6,   7 }, } },
                  { { {  -5,   7 }, } },
                  { { {  -4,   7 }, } },
                  { { {  -3,   7 }, } },
                  { { {  -2,   7 }, } },
                  { { {  -1,   7 }, } },
                  { { {   0,   7 }, } },
                  { { {   1,   7 }, } },
                  { { {   2,   7 }, } },
                  { { {   3,   7 }, } },
                  { { {   4,   7 }, } },
                  { { {   5,   7 }, } },
                  { { {   6,   7 }, } },
                  { { {   7,   7 }, } },
                  { { {   8,   7 }, } },
                  { { {   9,   7 }, } },
                  { { {  10,   7 }, } },
                  { { { -10,   8 }, } },
                  { { {  -9,   8 }, } },
                  { { {  -8,   8 }, } },
                  { { {  -7,   8 }, } },
                  { { {  -6,   8 }, } },
                  { { {  -5,   8 }, } },
                  { { {  -4,   8 }, } },
                  { { {  -3,   8 }, } },
                  { { {  -2,   8 }, } },
                  { { {  -1,   8 }, } },
                  { { {   0,   8 }, } },
                  { { {   1,   8 }, } },
                  { { {   2,   8 }, } },
                  { { {   3,   8 }, } },
                  { { {   4,   8 }, } },
                  { { {   5,   8 }, } },
                  { { {   6,   8 }, } },
                  { { {   7,   8 }, } },
                  { { {   8,   8 }, } },
                  { { {   9,   8 }, } },
                  { { {  10,   8 }, } },
                  { { { -10,   9 }, } },
                  { { {  -9,   9 }, } },
                  { { {  -8,   9 }, } },
                  { { {  -7,   9 }, } },
                  { { {  -6,   9 }, } },
                  { { {  -5,   9 }, } },
                  { { {  -4,   9 }, } },
                  { { {  -3,   9 }, } },
                  { { {  -2,   9 }, } },
                  { { {  -1,   9 }, } },
                  { { {   0,   9 }, } },
                  { { {   1,   9 }, } },
                  { { {   2,   9 }, } },
                  { { {   3,   9 }, } },
                  { { {   4,   9 }, } },
                  { { {   5,   9 }, } },
                  { { {   6,   9 }, } },
                  { { {   7,   9 }, } },
                  { { {   8,   9 }, } },
                  { { {   9,   9 }, } },
                  { { {  10,   9 }, } },
                  { { { -10,  10 }, } },
                  { { {  -9,  10 }, } },
                  { { {  -8,  10 }, } },
                  { { {  -7,  10 }, } },
                  { { {  -6,  10 }, } },
                  { { {  -5,  10 }, } },
                  { { {  -4,  10 }, } },
                  { { {  -3,  10 }, } },
                  { { {  -2,  10 }, } },
                  { { {  -1,  10 }, } },
                  { { {   0,  10 }, } },
                  { { {   1,  10 }, } },
                  { { {   2,  10 }, } },
                  { { {   3,  10 }, } },
                  { { {   4,  10 }, } },
                  { { {   5,  10 }, } },
                  { { {   6,  10 }, } },
                  { { {   7,  10 }, } },
                  { { {   8,  10 }, } },
                  { { {   9,  10 }, } },
                  { { {  10,  10 }, } },
                } ) {
      // empty
    }

    /************************************************************/
    ThoatPiecePaths::ThoatPiecePaths( )
      : PiecePaths( 
                {
                  // Since the thoat can jump, we only need to record the endpoints of the paths, not the intermediate ones.
                  // 2 rows up
                  { {  { -1,  2 },  } },
                  { {  {  1,  2 },  } },
                  // 1 row up
                  { {  { -2,  1 },  } },
                  { {  {  0,  1 },  } },
                  { {  {  2,  1 },  } },
                  // 0 rows up
                  { {  { -1,  0 },  } },
                  { {  {  1,  0 },  } },
                  // 1 row down
                  { {  { -2, -1 },  } },
                  { {  {  0, -1 },  } },
                  { {  {  2, -1 },  } },
                  // 2 rows down
                  { {  { -1, -2 },  } },
                  { {  {  1, -2 },  } },
                } ) {
      // empty
    }

    /************************************************************/
    Player1PanthanPiecePaths::Player1PanthanPiecePaths( )
      : PiecePaths( 
                {
                  // 1 row up
                  { {  { -1,  1 },  } },
                  { {  {  0,  1 },  } },
                  { {  {  1,  1 },  } },
                  // 0 rows up
                  { {  { -1,  0 },  } },
                  { {  {  1,  0 },  } },
                } ) {
      // empty
    }

    /************************************************************/
    Player2PanthanPiecePaths::Player2PanthanPiecePaths( )
      : PiecePaths( 
                {
                  // 1 row down
                  { {  { -1, -1 },  } },
                  { {  {  0, -1 },  } },
                  { {  {  1, -1 },  } },
                  // 0 rows down
                  { {  { -1,  0 },  } },
                  { {  {  1,  0 },  } },
                } ) {
      // empty
    }

    /************************************************************/
    Piece::Piece( )
      : mPaths( 0 ),
        mPlayer( 0 ),
        mType( PANTHAN ),
        mLocation( { -1, -1 } ),
        mAlive( false ) {
      // empty
    }
    Piece::Piece( const char player, const char type, const BoardLocation& location ) 
      : mPaths( 0 ),
        mPlayer( player ),
        mType( type ),
        mLocation( location ),
        mAlive( true ) {
      switch( type ) {
      case WARRIOR:
        mPaths = &g_warriorPiecePaths;
        break;
      case PADWAR:
        mPaths = &g_padwarPiecePaths;
        break;
      case DWAR:
        mPaths = &g_dwarPiecePaths;
        break;
      case FLIER:
        mPaths = &g_flierPiecePaths;
        break;
      case CHIEF:
        mPaths = &g_chiefPiecePaths;
        break;
      case PRINCESS:
        mPaths = &g_princessPiecePaths;
        break;
      case THOAT:
        mPaths = &g_thoatPiecePaths;
        break;
      case PANTHAN:
        if( player == 1 ) {
          mPaths = &g_player1PanthanPiecePaths;
        } else {
          mPaths = &g_player2PanthanPiecePaths;
        }
        break;
      default:
        {
          std::stringstream ss;
          ss << "Unknown Jetan::Piece::TYPE ( ";
          ss << (int) type;
          ss << " )";
          throw Exception( ss.str( ) );
        }
      }
    }

    /************************************************************/
    MoveData::MoveData( )
      : piece( { -1, -1 } ), offset( { 0, 0 } ) {
    }

    MoveData::MoveData( const BoardLocation& piece_in, const BoardOffset& offset_in ) 
      : piece( piece_in ), offset( offset_in ) {
      // empty
    }

    void MoveData::setData( const BoardLocation& piece_in, const BoardOffset& offset_in ) {
      piece = piece_in;
      offset = offset_in;
    }

    bool MoveData::operator<( const MoveData& rhs ) const {
      if( piece.x < rhs.piece.x ) {
        return true;
      } else if( piece.x > rhs.piece.x ) {
        return false;
      } else if( piece.y < rhs.piece.y ) {
        return true;
      } else if( piece.y > rhs.piece.y ) {
        return false;
      } else if( offset.dx < rhs.offset.dx ) {
        return true;
      } else if( offset.dx > rhs.offset.dx ) {
        return false;
      } else if( offset.dy < rhs.offset.dy ) {
        return true;
      } else if( offset.dy > rhs.offset.dy ) {
        return false;
      } else {
        return false;
      }
    }
    
    /************************************************************/
    BoardData::BoardData( ) {
      Reset( );
    }

    char piece_type( int row, int column ) {
      // Type of the piece, based on the initial row and column
      // of the piece.
      // For row 9, we give the same values as row 0, but
      // the code that calls us stores the columns in reverse order.
      char pt;
      if( row == 0 || row == 9 ) {
        switch( column ) {
        case 0: pt = Piece::WARRIOR; break;
        case 1: pt = Piece::PADWAR; break;
        case 2: pt = Piece::DWAR; break;
        case 3: pt = Piece::FLIER; break;
        case 4: pt = Piece::CHIEF; break;
        case 5: pt = Piece::PRINCESS; break;
        case 6: pt = Piece::FLIER; break;
        case 7: pt = Piece::DWAR; break;
        case 8: pt = Piece::PADWAR; break;
        case 9: pt = Piece::WARRIOR; break;
        default: pt = Piece:: PANTHAN; break;
        }
      } else if( row == 1 || row == 8 ) {
        switch( column ) {
        case 0: pt = Piece::THOAT; break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8: pt = Piece::PANTHAN; break;
        case 9: pt = Piece::THOAT; break;
        default: pt = Piece:: PANTHAN; break;
        }
      } else {
        pt = Piece::PANTHAN;
      }
      return pt;
    }

    void BoardData::Reset( ) {
      int row, column;
       
      // empty spaces
      for( row = 2; row < 8; row++ ) {
        for( column = 0; column < 10; column++ ) {
          squares[ row ][ column ] = -1;
        }
      }

      // player 1, back row
      row = 0;
      for( column = 0; column < 10; column++ ) {
        squares[ row ][ column ] = column;
        pieces[ column ] = Piece( 1, piece_type( row, column ), BoardLocation( { (char)column, (char)row } ) );
      }

      // player 1, front row
      row = 1;
      for( column = 0; column < 10; column++ ) {
        squares[ row ][ column ] = column + 10;
        pieces[ column + 10 ] = Piece( 1, piece_type( row, column ), BoardLocation( { (char)column, (char)row } ) );
      }

      // player 2, back row
      row = 9;
      for( column = 10; column > 0; column-- ) {
        squares[ row ][ column-1 ] = 10-column + 20;
        pieces[ 10 - column + 20 ] = Piece( 2, piece_type( row, column-1 ), BoardLocation( { (char)(column-1), (char)row } ) );
      }

      // player 2, front row
      row = 8;
      for( column = 0; column < 10; column++ ) {
        squares[ row ][ column ] = column + 30;
        pieces[ column + 30 ] = Piece( 2, piece_type( row, column ), BoardLocation( { (char)column, (char)row } ) );
      }

      player_turn = 1;
      used_escape[ 0 ] = 0;
      used_escape[ 1 ] = 0;
    }

    /************************************************************/
    Board::Board( ) 
      : board( ),
        number_of_turns( 0 ),
        legal_moves_valid( false ),
        legal_moves( 0 ),
        last_moves( 2 ),
        player_times( { 0.0, 0.0 } ) {
      InitBoard();
    }

    Board::Board( const Board &board_in )
      : board( board_in.board ),
        number_of_turns( board_in.number_of_turns ),
        legal_moves_valid( board_in.legal_moves_valid ),
        legal_moves( board_in.legal_moves ),
        last_moves( board_in.last_moves ),
        player_times( board_in.player_times ){
      // empty
    }

    Board::Board( const std::string &board_str_in )
      : board( ),
        number_of_turns( 0 ),
        legal_moves_valid( false ),
        legal_moves( 0 ),
        last_moves( 2 ),
        player_times( { 0.0, 0.0 } ){
      SetBoardString( board_str_in );
    }

    Board::~Board( ) {
      // empty
    }
    
    bool Board::Move( int player, const MoveData &move_in, double seconds_in ) {
      DBGP_ENV( LOG_STREAM( std::cerr ) 
                << "Player: " << player
                << "  Move: " << move_in
                << "  IsLegal: " << IsLegal(player, move_in)
                << "  TurnOK: " << (player == board.player_turn)
                << std::endl);
      if((IsLegal(player, move_in)) &&
         (player == board.player_turn))
        {
          int from_column = move_in.piece.x;
          int from_row = move_in.piece.y;
          int from_piece = board.squares[ from_row ][ from_column ];

          int to_column = move_in.piece.x + move_in.offset.dx;
          int to_row = move_in.piece.y + move_in.offset.dy;
          int old_piece = board.squares[ to_row ][ to_column ];

          if( std::abs( move_in.offset.dx ) > 3 || std::abs( move_in.offset.dy ) > 3 ) {
            board.used_escape[ player-1 ] = 1;
          }
          
          DBGP_ENV( LOG_STREAM( std::cerr ) 
                    << "Moving piece number: " << from_piece << " from ( " << from_column << "," << from_row << " ) "
                    << "to ( " << to_column << "," << to_row << " ) "
                    << std::endl );

          if( old_piece >= 0 ) {
            board.pieces[ old_piece ].mLocation = { -1, -1 };
            board.pieces[ old_piece ].mAlive = false;

            // check for win here
            if( board.pieces[ old_piece ].mType == Piece::PRINCESS ) {
              board.player_turn = board.player_turn | 4;
            } else if( board.pieces[ old_piece ].mType == Piece::CHIEF &&
                       board.pieces[ from_piece ].mType == Piece::CHIEF ) {
              board.player_turn = board.player_turn | 4;
            }
          }

          board.pieces[ from_piece ].mLocation = { (char)to_column, (char)to_row };
          board.squares[ from_row ][ from_column ] = -1;
          board.squares[ to_row ][ to_column ] = from_piece;

          if( ( board.player_turn & 4 ) > 0 ) {
            // game over, don't advance
          } else if( board.player_turn == 1 ) {
            board.player_turn = 2;
          } else {
            board.player_turn = 1;
          }
          last_moves[player-1]    = move_in;
          DBGP_ENV( LOG_STREAM( std::cerr ) 
                    << "player-1: " << (player-1)
                    << "  last_moves[player-1]: " << last_moves[player-1]
                    << std::endl );
          player_times[player-1] += seconds_in;

          number_of_turns ++;
          legal_moves_valid = false;
          return true;
        }
      return false;
    }

    bool Board::Move( int player, const MoveData &move_in ) {
      return Move( player, move_in, 0.0 );
    }

    bool Board::IsLegal( int player, const MoveData &move_in ) {
      DetermineLegalMoves( player );
      bool found = std::binary_search( legal_moves.begin( ), legal_moves.end( ), move_in );
      DBGP_ENV( LOG_STREAM( std::cerr ) 
                << "IsLegal( "
                << "Player: " << player
                << "  Move: " << move_in
                << "  Move Count: " << legal_moves.size( )
                << "  Found: " << found
                << " ) "
                << std::endl);
      if( !found ) {
        DBGP_ENV( LOG_STREAM( std::cerr ) 
                  << "legal_moves >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                  << std::endl);
        for( auto it = legal_moves.begin( ); it != legal_moves.end( ); it++ ) {
          DBGP_ENV( LOG_STREAM( std::cerr ) 
                    << "legal_move: " << *it
                    << std::endl);
        }
        DBGP_ENV( LOG_STREAM( std::cerr ) 
                  << "legal_moves <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
                  << std::endl);
      }

      return found;
    }
    
    bool Board::Winner( int player ) const {
      return ( ( board.player_turn & 4 ) > 0 ) && 
        ( ( board.player_turn & (~4) ) == player );
    }
    
    int Board::HaveWinner() const {
      if( ( board.player_turn & 4 ) > 0 ) {
        return board.player_turn & (~4);
      } else {
        return 0;
      }
    }

    void Board::DetermineAttackedLocations( int player, SetOfBoardLocations& locations ) const {
      //locations.clear( );
      
      int offset = ( player == 1 ) ? 0 : 20;
      int i;

      for( i = offset; i < offset + 20; i++ ) {
        if( !board.pieces[ i ].mAlive ) {
          continue;
        }
        if( board.pieces[ i ].mType == Piece::PRINCESS ) {
          continue;
        }
        const std::vector< MovePath >* paths = &( board.pieces[ i ].mPaths->getPaths( ) );
        unsigned int j, k;

        DBGP_ENV( LOG_STREAM( std::cerr ) 
                  << "piece number: " << i
                  << " type: " << (int)board.pieces[ i ].mType
                  << " x,y: " << (int)board.pieces[ i ].mLocation.x << "," << (int)board.pieces[ i ].mLocation.y
                  << " path_count: " << paths->size( )
                  << std::endl );
        
        for( j = 0; j < paths->size( ); j++ ) {
          const MovePath& path = (*paths)[ j ];
          if( path.steps.size( ) == 0 ) {
            DBGP_ENV( LOG_STREAM( std::cerr ) 
                      << "path.steps.size( ) == 0"
                      << std::endl );
            continue;
          }
          bool valid_move = true;

          // check intermediate steps are clear
          int column = board.pieces[ i ].mLocation.x;
          int row = board.pieces[ i ].mLocation.y;
          for( k = 0; k < path.steps.size( ) - 1; k++ ) {
            column += path.steps[ k ].dx;
            row    += path.steps[ k ].dy;
            if( column < 0 || column >= 10 || row < 0 || row >= 10 ) {
              valid_move = false;
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "step out of bounds"
                        << std::endl );
              break;
            }
            if( board.squares[ row ][ column ] != -1 ) {
              valid_move = false;
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "intermediate step occupied"
                        << std::endl );
              break;
            }
          }
          // check last step
          if( valid_move ) {
            column += path.steps[ k ].dx;
            row    += path.steps[ k ].dy;
            if( column < 0 || column >= 10 || row < 0 || row >= 10 ) {
              valid_move = false;
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "final step out of bounds"
                        << std::endl );
            }
            /* This is not a show stopper for showing attacked squares */
            // if( board.squares[ row ][ column ] != -1 ) {
            //   if( board.squares[ row ][ column ] >= offset &&
            //       board.squares[ row ][ column ] < offset + 20 ) {
            //     valid_move = false;
            //     DBGP_ENV( LOG_STREAM( std::cerr ) 
            //               << "final step on own piece"
            //               << std::endl );
            //   }
            // }

          }
          
          if( valid_move ) {
            BoardLocation destination( { (char)column, (char)row } );
            if( locations.count( destination ) == 0 ) {
              locations.insert( destination );
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "player: " << player 
                        << " attacks: " << column << "," << row
                        << std::endl );
            } else {
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "player: " << player 
                        << " already attacks: " << column << "," << row
                        << std::endl );
            }
          }
        }
      }
    }

    const std::vector< MoveData >& Board::DetermineLegalMoves( int player ) {
      DBGP_ENV( LOG_STREAM( std::cerr ) 
                << "player: " << player
                << std::endl );

      if( legal_moves_valid ) {
        return legal_moves;
      }
      legal_moves.resize( 0 );
      SetOfBoardLocations attacked_locations;
      int other_player = ( player == 1 ) ? 2 : 1;
      DetermineAttackedLocations( other_player, attacked_locations );

      /*
       * For each of player's live pieces, find all unique legal destinations
       */
      /*
       * FIXME: Still have not coded the princess' specialty restrictions:
       * the escape, - DONE
       * no attack   - DONE
       * no move into attacked location - DONE
       */
      int offset = ( player == 1 ) ? 0 : 20;
      int i;
      for( i = offset; i < offset + 20; i++ ) {
        DBGP_ENV( LOG_STREAM( std::cerr ) 
                  << "piece number: " << i
                  << std::endl );
        if( !board.pieces[ i ].mAlive ) {
          continue;
        }
        bool is_princess = board.pieces[ i ].mType == Piece::PRINCESS;
        SetOfBoardLocations legal_destinations;
        const std::vector< MovePath >* paths = &( board.pieces[ i ].mPaths->getPaths( ) );
        if( is_princess && !board.used_escape[ player-1 ]
            && attacked_locations.count( board.pieces[ i ].mLocation ) > 0 ) {
          paths = &( g_princessPieceEscapePaths.getPaths( ) );
        }
        unsigned int j, k;
        
        for( j = 0; j < paths->size( ); j++ ) {
          const MovePath& path = (*paths)[ j ];
          DBGP_ENV( LOG_STREAM( std::cerr ) 
                    << "piece path: " << j
                    << " steps: " << path.steps.size( )
                    << std::endl );
          if( path.steps.size( ) == 0 ) {
            continue;
          }
          bool valid_move = true;
          // check intermediate steps are clear
          int column = board.pieces[ i ].mLocation.x;
          int row = board.pieces[ i ].mLocation.y;
          DBGP_ENV( LOG_STREAM( std::cerr ) 
                    << "piece loc: ( " << row << " " << column << " )"
                    << std::endl );
          for( k = 0; k < path.steps.size( ) - 1; k++ ) {
            column += path.steps[ k ].dx;
            row    += path.steps[ k ].dy;
            DBGP_ENV( LOG_STREAM( std::cerr ) 
                      << "piece path step: " << k 
                      << " loc: ( " << row << " " << column << " )"
                      << std::endl );
            if( column < 0 || column >= 10 || row < 0 || row >= 10 ) {
              valid_move = false;
              break;
            }
            if( board.squares[ row ][ column ] != -1 ) {
              valid_move = false;
              break;
            }
          }
          // check last step
          if( valid_move ) {
            column += path.steps[ k ].dx;
            row    += path.steps[ k ].dy;
            DBGP_ENV( LOG_STREAM( std::cerr ) 
                      << "piece path step: " << k 
                      << " dst: ( " << row << " " << column << " )"
                      << std::endl );
            if( column < 0 || column >= 10 || row < 0 || row >= 10 ) {
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "piece out of bounds"
                        << std::endl );
              valid_move = false;
            }
            if( board.squares[ row ][ column ] != -1 ) {
              if( board.squares[ row ][ column ] >= offset &&
                  board.squares[ row ][ column ] < offset + 20 ) {
                // ends on own piece
                DBGP_ENV( LOG_STREAM( std::cerr ) 
                          << "ends on team mate"
                          << std::endl );
                valid_move = false;
              } else if( is_princess ) {
                // ends on a piece
                DBGP_ENV( LOG_STREAM( std::cerr ) 
                          << "princess can not attack"
                          << std::endl );
                valid_move = false;
              }
            }
          }

          BoardLocation destination( { (char)column, (char)row } );
          if( is_princess && attacked_locations.count( destination ) > 0 ) {
            valid_move = false;
          }

          if( valid_move ) {
            if( legal_destinations.count( destination ) > 0 ) {
              // already have a way for this piece to get here.
              DBGP_ENV( LOG_STREAM( std::cerr ) 
                        << "non-unique destination"
                        << " dst: ( " << row << " " << column << " )"
                        << std::endl );
              valid_move = false;
            } else {
              legal_destinations.insert( destination );
            }
          }
          
          if( valid_move ) {
            MoveData move_data;
            move_data.piece.x = board.pieces[ i ].mLocation.x;
            move_data.piece.y = board.pieces[ i ].mLocation.y;
            move_data.offset.dx = column - board.pieces[ i ].mLocation.x;
            move_data.offset.dy = row    - board.pieces[ i ].mLocation.y;
            legal_moves.push_back( move_data );
            DBGP_ENV( LOG_STREAM( std::cerr ) 
                      << "added legal move " << move_data
                      << std::endl );
          }
          
        }
      }
      
      legal_moves_valid = true;
      std::sort( legal_moves.begin( ), legal_moves.end( ) );

      DBGP_ENV( LOG_STREAM( std::cerr ) 
                << "legal move count: " << legal_moves.size( )
                << std::endl );

      return legal_moves;
    }

    const std::vector< MoveData >& Board::GetLastMoves( ) const {
      return last_moves;
    }
    const std::vector< double >& Board::GetPlayerTimes( ) const {
      return player_times;
    }
    unsigned int Board::GetTotalMoves( ) const {
      return number_of_turns;
    }
    const BoardData& Board::GetBoard( ) const {
      return board;
    }
    void Board::SetBoard( const BoardData &board_in ) {
      board = board_in;

      int row, column;
      for( row = 0; row < 10; row++ ) {
        for( column = 0; column < 10; column++ ) {
          DBGP_ENV( LOG_STREAM( std::cerr ) 
                    << "Piece @" << column << "," << row
                    << " " << (int)board.squares[ row ][ column ]
                    << std::endl);
        }
      }

    }

    std::string Board::GetBoardString( ) const {
      std::stringstream ss;
      char comma = ',';
      char semi = ';';
      int row, column;

      for( row = 0; row < 10; row++ ) {
        for( column = 0; column < 10; column++ ) {
          ss << ( (int)board.squares[ row ][ column ] ) << comma;
        }
      }
      int piece;
      for( piece = 0; piece < 40; piece++ ) {
        ss << (int)board.pieces[ piece ].mPlayer << semi;
        ss << (int)board.pieces[ piece ].mType << semi;
        ss << (int)board.pieces[ piece ].mLocation.x << semi;
        ss << (int)board.pieces[ piece ].mLocation.y << semi;
        ss << (int)board.pieces[ piece ].mAlive << comma;
      }
      ss << board.player_turn << comma;

      ss << number_of_turns << comma;

      return ss.str( );
    }

    void Board::SetBoardString( const std::string &board_str_in ) {
      std::stringstream ss( board_str_in );

      char comma = ',';
      char semi = ';';
      int row, column;
      int piece;

      for( row = 0; row < 10; row++ ) {
        for( column = 0; column < 10; column++ ) {
          ss >> piece >> comma;
          board.squares[ row ][ column ] = piece;
        }
      }
      int player, piece_type, x, y, alive;
      for( piece = 0; piece < 40; piece++ ) {
        ss >> player >> semi;
        ss >> piece_type >> semi;
        ss >> x >> semi;
        ss >> y >> semi;
        ss >> alive >> comma;
        board.pieces[ piece ].mPlayer = player;
        board.pieces[ piece ].mType = piece_type;
        board.pieces[ piece ].mLocation.x = x;
        board.pieces[ piece ].mLocation.y = y;
        board.pieces[ piece ].mAlive = alive;
      }
      ss >> board.player_turn >> comma;

      ss >> number_of_turns >> comma;
    }

    void Board::InitBoard( ) {
      board.Reset( );
      
      number_of_turns = 0;
      legal_moves_valid = false;
      legal_moves.resize( 0 );
      last_moves.resize( 2 );
      int i;
      for( i = 0; i < 2; i++ ) {
        last_moves[ i ].piece.x = -1;
        last_moves[ i ].piece.y = -1;
        last_moves[ i ].offset.dx = 0;
        last_moves[ i ].offset.dy = 0;
        player_times[ i ] = 0.;
      }
    }
    bool Board::SetTotalMoves( unsigned int total_moves ) {
      number_of_turns = total_moves;
      return true;
    }
    bool Board::SetLastMove( int player_num, const MoveData &move ) {
      last_moves[ player_num - 1 ] = move;
      return true;
    }
    bool Board::SetPlayerTime( int player_num, const double &time ) {
      player_times[ player_num - 1 ] = time;
      return true;
    }

    /************************************************************/
    /************************************************************/
    /************************************************************/


    /************************************************************/

  }
}

std::ostream& operator<<( std::ostream& os, const ai::Jetan::MoveData& move ) {
  os << (int)move.piece.x << "," << (int)move.piece.y << ":" << (int)(move.piece.x+move.offset.dx) << "," << (int)(move.piece.y+move.offset.dy);
  return os;
}
